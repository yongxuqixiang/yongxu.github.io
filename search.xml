<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>“类”的初步认识</title>
    <url>/yongxu.github.io/2024/10/22/c++%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a><strong>类的概念</strong></h4><hr>
<p>类是面向对象编程的核心。我喜欢把类理解为一组数据和一个接口。例如机器人可以是一个类，他有一些数据，如颜色、大小、型号等，还有一个接口，如移动、转动、开关等。<br>类可以包含成员变量、成员函数、构造函数、析构函数等。成员变量是类的状态，成员函数是类的行为。</p>
<h4 id="类的声明和定义"><a href="#类的声明和定义" class="headerlink" title="类的声明和定义"></a><strong>类的声明和定义</strong></h4><hr>
<p>通常我们将类的定义放在头文件，而类行为的实现放在源文件中。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Robot</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// private:  声明成员变量</span>
    <span class="token comment">// 禁止直接访问，只能通过接口函数访问</span>
    <span class="token comment">// 在初始化时，通过构造函数初始化</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        string color<span class="token punctuation">;</span>
        <span class="token keyword">float</span> size<span class="token punctuation">;</span>
        <span class="token keyword">float</span> position<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> rotation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// public:  声明接口函数</span>
    <span class="token comment">// 允许直接访问，可以被其他函数调用</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment">/*
         构造函数
         构造函数的作用是初始化类的状态
         初始化方法：
            直接初始化，如：Robot r("red", 1.0);
            通过参数初始化，如：Robot r = Robot("red", 1.0);
        */</span>
        <span class="token function">Robot</span><span class="token punctuation">(</span>string c<span class="token punctuation">,</span> <span class="token keyword">float</span> s<span class="token punctuation">,</span> <span class="token keyword">float</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">float</span> r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
         析构函数
         析构函数的作用是释放类的资源（定义类的程序块结束后）
         一般不需要内容，除非使用new申请了内存需要手动释放
         */</span>
        <span class="token operator">~</span><span class="token function">Robot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

下面是类的实现：
<span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">Robot</span><span class="token punctuation">(</span>string c<span class="token punctuation">,</span> <span class="token keyword">float</span> s<span class="token punctuation">,</span> <span class="token keyword">float</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">float</span> r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    color <span class="token operator">=</span> c<span class="token punctuation">;</span>
    size <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Robot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 释放内存</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> z<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> z<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"color: "</span> <span class="token operator">&lt;&lt;</span> color <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size: "</span> <span class="token operator">&lt;&lt;</span> size <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"position: "</span> <span class="token operator">&lt;&lt;</span> position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"rotation: "</span> <span class="token operator">&lt;&lt;</span> rotation<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> rotation<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> rotation<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上是类的声明和定义，我们可以看到，类中包含了一些成员变量，以及一些接口函数。</p>
<pre class="line-numbers language-none"><code class="language-none">怎么理解接口？
接口是服务端为客户端封装好的，客户端只需要调用接口函数，就能完成某些功能。
服务端的责任是实现一些函数，并详细告知如何调用这些函数，以达到客户自己的目的。
而客户端的任务就是详细阅读接口文档，并调用接口函数，完成自己的需求。
所以，接口是服务端和客户端之间沟通的桥梁。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="如何使用类"><a href="#如何使用类" class="headerlink" title="如何使用类"></a><strong>如何使用类</strong></h4><hr>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> potions<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> rotation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 类的创建和结构类似</span>
Robot <span class="token function">robot</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 下面的创造方法实际上生成了一个临时对象，并将其赋值给了robot2</span>
Robot robot2 <span class="token operator">=</span> <span class="token function">Robot</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 我们也可以定义一个指针变量指向类对象，但最后需要手动释放内存，因为析构函数没有delete</span>
Robot <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Robot</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果没有定义构造函数，可以不进行初始化赋值</span>
Robot empty<span class="token punctuation">;</span>
<span class="token comment">// 但如果已经定义了构造函数，这样的初始化是非法的。</span>
<span class="token comment">// 但我们可以通过函数重载来使其合法</span>
<span class="token comment">// 在类声明中，我们可以定义一个空参数的构造函数Robot();</span>

<span class="token comment">// 在c++11中，我们可以用列表初始化的方式来初始化类对象</span>
<span class="token comment">// 这需要列表内参数和某个构造函数参数一致</span>
Robot robot3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Robot robot4<span class="token punctuation">&#123;</span><span class="token string">"black"</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 我们可以通过.来访问类的成员函数</span>
robot<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
robot<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
robot<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 但当我们使用const来修饰类对象时，我们不能调用类的成员函数</span>
<span class="token comment">// 因为成员函数可能修改类的状态，而const对象不能修改状态</span>
<span class="token comment">// 所以我们可以将某些成员函数声明为const，这样就可以在const对象上调用</span>
<span class="token keyword">const</span> Robot robot5 <span class="token operator">=</span> robot<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// 将shoow最后加上const，表示该函数不修改类的状态，即可被调用</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a><strong>this指针</strong></h4><hr>
<p>this指针是一个隐含的指针，指向当前对象的地址。在类的成员函数中，我们可以通过this指针来访问类的成员变量。<br>假如我们想让一个类的成员函数返回这个类本身，我们可以用this指针来实现。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 第一个Robot表明这是函数的返回值类型</span>
<span class="token comment">// 第二个Robot表明这是Robot类的一个成员函数</span>
<span class="token keyword">const</span> Robot<span class="token operator">&amp;</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">returnthisrobot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h4><hr>
<p>为什么定义类的成员函数是要加上类名称<code>Robot::</code>呢？<br>原因是我们声明成员函数时，是在类内进行的，所以作用域局限在类内。<br>因此在类外进行定义时，需要加上类名称。<br>这也就意味着我们可以在类外定义另一个同名函数，而不会与类的成员函数冲突。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>那为什么在类的成员函数中，我们可以直接使用类内的成员变量呢？<br>原因是成员函数都是内联函数，因此编译器会将函数体内的变量直接替换成内存地址，因此可以直接访问。</p>
<p>至于类的声明周期，前文提过，当创造类的程序块结束时，类的析构函数会自动调用，释放类占用的资源。</p>
<pre class="line-numbers language-none"><code class="language-none">如何在类内定义常量？
&#96;&#96;&#96;cpp
private:
    const int max_size &#x3D;  100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>这样的方法是不行的，因为类声明时并没有存储空间，因此无法存储常量。
正确的方法是：
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> max_size <span class="token operator">=</span>  <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
这样的声明方式会在整个程序中创建一个常量，因此可以被所有对象共享。
</code></pre>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>c++笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>my first blog</title>
    <url>/yongxu.github.io/2024/10/20/firstpost/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1>]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(Ubuntu)</title>
    <url>/yongxu.github.io/2024/10/27/docker(Ubuntu)/</url>
    <content><![CDATA[<h3 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h3><h4 id="安装gnome-terminal（非桌面条件）"><a href="#安装gnome-terminal（非桌面条件）" class="headerlink" title="安装gnome-terminal（非桌面条件）"></a>安装gnome-terminal（非桌面条件）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnome-terminal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="下载docker的DEB包"><a href="#下载docker的DEB包" class="headerlink" title="下载docker的DEB包"></a>下载docker的DEB包</h4><p><a href="https://desktop.docker.com/linux/main/amd64/docker-desktop-amd64.deb?utm_source=docker&utm_medium=webreferral&utm_campaign=docs-driven-download-linux-amd64&_gl=1*1j5mukd*_gcl_au*ODI4NjM3NDE0LjE3MzAwMzI5Nzc.*_ga*MTU1NjMxNTk3Mi4xNzMwMDMyOTc3*_ga_XJWPQMJYHQ*MTczMDAzODc1MC4zLjEuMTczMDAzOTAwMS40OS4wLjA">下载连接</a><br>如果失效，自行去官网查找<br>[配置教程](<a href="https://docs.docker.com/desktop/install/linux/ubuntu/#install-docker-desktop">Ubuntu | Docker Docs</a>)</p>
<h4 id="配置docker仓库"><a href="#配置docker仓库" class="headerlink" title="配置docker仓库"></a>配置docker仓库</h4><p>源自docker官网</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Add Docker's official GPG key:</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ca-certificates <span class="token function">curl</span>
<span class="token function">sudo</span> <span class="token function">install</span> <span class="token parameter variable">-m</span> 0755 <span class="token parameter variable">-d</span> /etc/apt/keyrings
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token parameter variable">-o</span> /etc/apt/keyrings/docker.asc
<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /etc/apt/keyrings/docker.asc

<span class="token comment"># Add the repository to Apt sources:</span>
<span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>
  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">.</span> /etc/os-release <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$VERSION_CODENAME</span>"</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token punctuation">\</span>
  <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null
<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后可以安装docker包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="apt安装docker"><a href="#apt安装docker" class="headerlink" title="apt安装docker"></a>apt安装docker</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 注意：<span class="token operator">&lt;</span>arch<span class="token operator">></span>改成安装包的名称，例如amd64
// 需要将deb包放在当前工作目录
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ./docker-desktop-<span class="token operator">&lt;</span>arch<span class="token operator">></span>.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装完成后查看version:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果有版本信息显示，说明安装完成。</p>
<h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><h5 id="链接超时"><a href="#链接超时" class="headerlink" title="链接超时"></a>链接超时</h5><p>docker pull 镜像时报错：<br>Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>“: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)<br>报错显示连接超时，因为docker默认用国外镜像拉取，所以可以采用国内镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%% 新建json文件 %%
<span class="token function">vim</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>添加以下内容</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;镜像加速地址
&#123;        &quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>重载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果仍然没用，尝试给docker配置代理。<br>docker代理并不和ubuntu通用，需要再自行配置<br>docker pull 的代理被 systemd 接管，所以需要设置 systemd</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 如果没有docker.service.d文件夹，自行建立即可
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/docker.service.d/http-proxy.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>输入以下内容：</p>
<pre class="line-numbers language-none"><code class="language-none">[Service]
Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:xxxx&quot;
Environment&#x3D;&quot;HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:xxxx&quot;

&#x2F;&#x2F; xxxx 是端口号，如果使用clash 一般是7890
&#x2F;&#x2F; 127.0.0.1表示使用本机的代理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样的，需要重载后起效。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="docker-操作"><a href="#docker-操作" class="headerlink" title="docker 操作"></a>docker 操作</h3><h4 id="查看容器状态"><a href="#查看容器状态" class="headerlink" title="查看容器状态"></a>查看容器状态</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%% 查看容器状态 %%
<span class="token function">docker</span> <span class="token function">ps</span> 
<span class="token function">docker</span> contain list
<span class="token function">docker</span> contain <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可选参数</p>
<ul>
<li>-a:列出所有容器（包括停止运行的容器）</li>
<li>-s:列出容器大小</li>
<li>-q:仅显示容器ID</li>
<li><code>-f</code>可以通过容器名称（name）、退出状态（exited）、容器状态（status）、创建时间（before|since|after）等进行过滤</li>
</ul>
<h4 id="启停容器"><a href="#启停容器" class="headerlink" title="启停容器"></a>启停容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%% 开启容器 %%
<span class="token function">docker</span> start containID
%% 关闭容器 %%
<span class="token function">docker</span> stop containID
%% 删除容器 %%
<span class="token function">docker</span> <span class="token function">rm</span> containID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>进入一个容器并新开一个终端</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> containID 路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>从当前终端进入容器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> attach containID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>关闭终端后容器自动结束，若不想结束容器，按住ctl+P+Q即可</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
