<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker(Ubuntu)</title>
    <url>/yongxu.github.io/2024/10/27/docker(Ubuntu)/</url>
    <content><![CDATA[<h3 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a><strong>配置docker</strong></h3><hr>
<h4 id="安装gnome-terminal-非桌面条件"><a href="#安装gnome-terminal-非桌面条件" class="headerlink" title="安装gnome-terminal(非桌面条件)"></a><strong>安装gnome-terminal(非桌面条件)</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnome-terminal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="下载docker的DEB包"><a href="#下载docker的DEB包" class="headerlink" title="下载docker的DEB包"></a><strong>下载docker的DEB包</strong></h4><p><a href="https://desktop.docker.com/linux/main/amd64/docker-desktop-amd64.deb?utm_source=docker&utm_medium=webreferral&utm_campaign=docs-driven-download-linux-amd64&_gl=1*1j5mukd*_gcl_au*ODI4NjM3NDE0LjE3MzAwMzI5Nzc.*_ga*MTU1NjMxNTk3Mi4xNzMwMDMyOTc3*_ga_XJWPQMJYHQ*MTczMDAzODc1MC4zLjEuMTczMDAzOTAwMS40OS4wLjA">下载连接</a><br>如果失效，自行去官网查找<br><a href="https://docs.docker.com/desktop/install/linux/ubuntu/#install-docker-desktop">配置教程</a></p>
<h4 id="配置docker仓库"><a href="#配置docker仓库" class="headerlink" title="配置docker仓库"></a><strong>配置docker仓库</strong></h4><p>源自docker官网</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Add Docker's official GPG key:</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ca-certificates <span class="token function">curl</span>
<span class="token function">sudo</span> <span class="token function">install</span> <span class="token parameter variable">-m</span> 0755 <span class="token parameter variable">-d</span> /etc/apt/keyrings
<span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token parameter variable">-o</span> /etc/apt/keyrings/docker.asc
<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /etc/apt/keyrings/docker.asc

<span class="token comment"># Add the repository to Apt sources:</span>
<span class="token builtin class-name">echo</span> <span class="token punctuation">\</span>
  <span class="token string">"deb [arch=<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">.</span> /etc/os-release <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$VERSION_CODENAME</span>"</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token punctuation">\</span>
  <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null
<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后可以安装docker包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="apt安装docker"><a href="#apt安装docker" class="headerlink" title="apt安装docker"></a><strong>apt安装docker</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 注意：<span class="token operator">&lt;</span>arch<span class="token operator">></span>改成安装包的名称，例如amd64
// 需要将deb包放在当前工作目录
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ./docker-desktop-<span class="token operator">&lt;</span>arch<span class="token operator">></span>.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装完成后查看version:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> compose version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果有版本信息显示，说明安装完成。</p>
<h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a><strong>常见错误</strong></h4><h5 id="链接超时"><a href="#链接超时" class="headerlink" title="链接超时"></a><strong>链接超时</strong></h5><p>docker pull 镜像时报错：<br>Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>“: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)<br>报错显示连接超时，因为docker默认用国外镜像拉取，所以可以采用国内镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%% 新建json文件 %%
<span class="token function">vim</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>添加以下内容</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;镜像加速地址
&#123;        &quot;registry-mirrors&quot;:[&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>重载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果仍然没用，尝试给docker配置代理。<br>docker代理并不和ubuntu通用，需要再自行配置<br>docker pull 的代理被 systemd 接管，所以需要设置 systemd</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 如果没有docker.service.d文件夹，自行建立即可
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/docker.service.d/http-proxy.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>输入以下内容：</p>
<pre class="line-numbers language-none"><code class="language-none">[Service]
Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:xxxx&quot;
Environment&#x3D;&quot;HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:xxxx&quot;

&#x2F;&#x2F; xxxx 是端口号，如果使用clash 一般是7890
&#x2F;&#x2F; 127.0.0.1表示使用本机的代理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>同样的，需要重载后起效。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload
systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="docker-操作"><a href="#docker-操作" class="headerlink" title="docker 操作"></a><strong>docker 操作</strong></h3><hr>
<h4 id="查看容器状态"><a href="#查看容器状态" class="headerlink" title="查看容器状态"></a><strong>查看容器状态</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%% 查看容器状态 %%
<span class="token function">docker</span> <span class="token function">ps</span> 
<span class="token function">docker</span> contain list
<span class="token function">docker</span> contain <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可选参数</p>
<ul>
<li>-a:列出所有容器（包括停止运行的容器）</li>
<li>-s:列出容器大小</li>
<li>-q:仅显示容器ID</li>
<li><code>-f</code>可以通过容器名称（name）、退出状态（exited）、容器状态（status）、创建时间（before|since|after）等进行过滤</li>
</ul>
<h4 id="启停容器"><a href="#启停容器" class="headerlink" title="启停容器"></a><strong>启停容器</strong></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%% 开启容器 %%
<span class="token function">docker</span> start containID
%% 关闭容器 %%
<span class="token function">docker</span> stop containID
%% 删除容器 %%
<span class="token function">docker</span> <span class="token function">rm</span> containID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a><strong>进入容器</strong></h4><p>进入一个容器并新开一个终端</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> containID 路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>从当前终端进入容器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> attach containID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>关闭终端后容器自动结束，若不想结束容器，按住ctl+P+Q即可</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何开始你的第一个神经网络</title>
    <url>/yongxu.github.io/2024/10/31/pytorch%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-Lecture1/</url>
    <content><![CDATA[<p>这篇博客的主要内容将围绕<strong>如何训练你的第一个神经网络并完成简单的分类任务</strong></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h3><hr>
<p>我们选择Pycharm作为开发的IDE环境，使用conda管理虚拟环境。</p>
<h5 id="Step-1-下载Anaconda"><a href="#Step-1-下载Anaconda" class="headerlink" title="Step 1 下载Anaconda"></a>Step 1 下载Anaconda</h5><hr>
<p>前往官网下载Anaconda，并完成安装<br><a href="https://www.anaconda.com/">conda官网</a><br>安装完成后，打开命令行终端并输入下面指令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若显示conda系统信息，则已完成安装</p>
<h5 id="Step-2-创建虚拟环境"><a href="#Step-2-创建虚拟环境" class="headerlink" title="Step 2 创建虚拟环境"></a>Step 2 创建虚拟环境</h5><hr>
<p>输入下面终端指令，创建python虚拟环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 查看虚拟环境
conda <span class="token function">env</span> list
// 创建虚拟环境
// <span class="token string">'myenv'</span>替换成你喜欢的虚拟环境名称
// <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.5</span>表示指定python版本为3.5
conda create <span class="token parameter variable">--name</span> myenv <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.5</span>
// 再次查看虚拟环境，你应该会看到刚刚新建的环境
conda <span class="token function">env</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>环境创建后，可以在你希望进行python开发的文件位置打开一个终端<br>输入下面的指令，激活python虚拟环境（指终端进入python控制台）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// <span class="token string">'myenv'</span>替换成你希望激活的环境名称
activate myenv
// 可以使用这个指令离开虚拟环境
deavtivete
// 这个指令可以删除虚拟环境
conda remove <span class="token parameter variable">--name</span> myenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在虚拟环境中，可以应用一些conda指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda list //查看有什么包
conda <span class="token function">install</span> xxxx // 安装特定包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="Step-3-安装pycharm"><a href="#Step-3-安装pycharm" class="headerlink" title="Step 3 安装pycharm"></a>Step 3 安装pycharm</h5><hr>
<p>前往官网安装pycharm<br><a href="https://www.jetbrains.com/pycharm/">官网</a><br>安装时可以选择将vscode风格和插件一键移植到pycharm<br>安装完成后，新建一个项目<br><img src="/yongxu.github.io/images/pytorch_p1.png" loading="lazy"><br>python路径选择你刚创建的虚拟环境，选择其中的python.exe文件即可<br>至此，你已经完成全部环境配置，可以尝试运行简单python程序<br>新建python程序，输入下面的代码并运行，检查解释器是否完成配置</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>Hello World<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="训练你的第一个模型"><a href="#训练你的第一个模型" class="headerlink" title="训练你的第一个模型"></a><strong>训练你的第一个模型</strong></h3><hr>
<p>我们选择从<a href="https://www.kaggle.com/">Kaggle</a>上获取开源数据，进行网络训练。</p>
<h5 id="Step-1-下载数据集"><a href="#Step-1-下载数据集" class="headerlink" title="Step 1 下载数据集"></a>Step 1 下载数据集</h5><hr>
<p>前往官网<a href="https://www.kaggle.com/datasets/rahmasleam/bird-speciees-dataset">Bird Speciees Dataset</a><br>直接下载数据集并解压到工作目录<br>你可以检查文件夹中的各个图片，应该是六种特征明显的鸟类。<br>检查无误后我们将开始编写程序。</p>
<h5 id="Step-2-数据预处理"><a href="#Step-2-数据预处理" class="headerlink" title="Step 2 数据预处理"></a>Step 2 数据预处理</h5><hr>
<p>一般而言，我们需要对输入的图像文件进行一些处理，包括</p>
<ul>
<li>图像对齐(224x224)</li>
<li>将类型转换为tensor张量</li>
<li>将像素值归一化到0~1</li>
<li>(可选)将图片像素值均值处理成0，保持一定方差<br>但本次我们不进行这样的操作，因为预处理的主要目的是加快训练速度和提高性能，<br>而这个数据集特征极其明显，因此不进行预处理对结果影响不大。</li>
</ul>
<h5 id="Step-3-分割数据集"><a href="#Step-3-分割数据集" class="headerlink" title="Step 3 分割数据集"></a>Step 3 分割数据集</h5><hr>
<p>首先，下面是你需要引入的所有包，在文件开头写入即可<br>（注意，大部分包你应该都没下载过，需要通过包管理下载，但不用担心，先往下看）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch  
<span class="token keyword">import</span> os  
  
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder  
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split  
<span class="token keyword">from</span> sympy <span class="token keyword">import</span> viete  
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>backcompat <span class="token keyword">import</span> keepdim_warning  
<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToTensor  
<span class="token keyword">from</span> torch <span class="token keyword">import</span> cuda<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> optim  
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F  
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader  
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>pycharm拥有快速修复功能，如果你发现代码中出现红色波浪，将鼠标放在其上，会出现快速修复功能，点击后pycharm会自动调包管理插件，下载所需的包，并完成import。<br>因此，你可以轻松地完成所需包的下载。<br>接下来进行数据集分割，将其分成训练集、测试集和验证集。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">path <span class="token operator">=</span> <span class="token string">"Bird Species Dataset"</span>  
  
data_dir <span class="token operator">=</span> path  
images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  
labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  
<span class="token comment"># 按顺序读取所有图像文件 </span>
<span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>data_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>  
    <span class="token keyword">for</span> f <span class="token keyword">in</span> files<span class="token punctuation">:</span>  
        <span class="token keyword">if</span> f<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> f<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.png'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
            file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> f<span class="token punctuation">)</span>  
            <span class="token comment"># 子目录名称作为标签  </span>
            label <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>root<span class="token punctuation">)</span>  
            images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>  
            labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>  
<span class="token comment"># 将字符串的label编码成数字</span>
le <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>  
encoded_labels <span class="token operator">=</span> le<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>  
<span class="token comment"># 第一步：先将整个数据集划分为训练集和其他(这里包括验证集+测试集)  </span>
train_images<span class="token punctuation">,</span> temp_images<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> tmp_labels <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>images<span class="token punctuation">,</span> encoded_labels<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> stratify<span class="token operator">=</span>labels<span class="token punctuation">)</span>  <span class="token comment"># 70% 训练, 30% 其他  </span>
  
<span class="token comment"># 第二步：从剩余的数据集中再划分出验证集和测试集  </span>
val_images<span class="token punctuation">,</span> test_images<span class="token punctuation">,</span> val_labels<span class="token punctuation">,</span> test_labels  <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>temp_images<span class="token punctuation">,</span> tmp_labels<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> stratify<span class="token operator">=</span>tmp_labels<span class="token punctuation">)</span>  <span class="token comment"># 15% 验证, 15% 测试  </span>
  
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"训练集大小: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_images<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"验证集大小: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>val_images<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"测试集大小: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>test_images<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>你可以运行文件，查看数据集大小是否正确</p>
<h5 id="Step-4-构建网络"><a href="#Step-4-构建网络" class="headerlink" title="Step 4 构建网络"></a>Step 4 构建网络</h5><hr>
<p>本次实验我们分别构造全连接网络和卷积网络，并比较性能差别<br>两个网络分别继承nn.Module这个基类（pytorch包内已经写好了）<br>super.init()表示使用父类的初始化，可以就理解为初始化<br>nn.Linear和nn.Conv2d也都是pytorch已经实现的连接层和卷积层<br>nn.MaxPool2d则是池化层，采用2x2的下采样<br>F.relu也是pytorch已经实现的函数，我们在开头已经导入了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Liner</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>  
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">224</span><span class="token operator">*</span><span class="token number">224</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
        <span class="token builtin">super</span><span class="token punctuation">(</span>Liner<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>  
        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>  
        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">)</span>  
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>  
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  
        <span class="token keyword">return</span> x  
  
<span class="token keyword">class</span> <span class="token class-name">CNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>  
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_classes <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> in_channels <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
        <span class="token builtin">super</span><span class="token punctuation">(</span>CNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>  
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> in_channels <span class="token punctuation">,</span> out_channels <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  
        self<span class="token punctuation">.</span>pool1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> <span class="token number">16</span> <span class="token punctuation">,</span> out_channels <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>  kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  
        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">*</span> <span class="token number">112</span><span class="token punctuation">,</span> out_features <span class="token operator">=</span>  num_classes<span class="token punctuation">)</span>
  
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>  
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> 
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  
        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此，我们网络的结构和向前传播已经构造完成。<br>由于pytorch不需要我们显式实现向后传播计算梯度，而是在<strong>后续计算过程生成计算图</strong>，来计算向后传播的梯度。所以整个网络已经搭建完成。</p>
<h5 id="Step-5-训练网络"><a href="#Step-5-训练网络" class="headerlink" title="Step 5 训练网络"></a>Step 5 训练网络</h5><hr>
<p>我们现在已经拥有了一组图片的tensor张量以及和它一一对应的标签，但是我们不能把这么多图片一起全都扔进网络训练，因为我们的显存（如果是CPU训练就是CPU内存）没有这么大(你可以全都扔进去试试:))。<br>所以我们需要在每轮训练时从train样本中不重复的抽取一组，来进行向前传播和向后传播。<br>我们称为batch_size。<br>我们同样借助torch来实现。<br>定义一个鸟的数据类，继承自torch的Dataset。<br>transform主要是讲图像的类型转换为tensor，便于前面定义的网络使用。<br>getitem是主要使用的方法，就是随机生成索引，并取出images和labels对应的数据。<br>使用这个类的好处在后面使用的时候就可以看出来，它可以自动随机取样，并且循环调用，且不会重复取样，可以保证一轮训练恰好用完所以train样本。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BirdDataset</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>  
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> images<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
        self<span class="token punctuation">.</span>images <span class="token operator">=</span> images  
        self<span class="token punctuation">.</span>labels <span class="token operator">=</span> labels  
        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform <span class="token keyword">if</span> transform <span class="token keyword">else</span> ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>  
  
    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>images<span class="token punctuation">)</span>  
    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>  
        img_path <span class="token operator">=</span> self<span class="token punctuation">.</span>images<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  
        label <span class="token operator">=</span> self<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>index<span class="token punctuation">]</span>  
        label <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>  
  
        <span class="token comment"># 加载图像并转换为PIL图像  </span>
        image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>  
  
        <span class="token comment"># 应用变换</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">:</span>  
            image <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  
  
        <span class="token comment"># 返回图像数据和对应标签  </span>
        <span class="token keyword">return</span> image<span class="token punctuation">,</span> label<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接下来我们调用上面写的网络类和数据集类，来进行训练。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用GPU训练，如果需要的话要自行配置cuda，第一次训练可以先不用</span>
device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>  
<span class="token comment"># 每次采样大小，一般128和64是个合适的值</span>
batch_size <span class="token operator">=</span> <span class="token number">64</span> 
<span class="token comment"># 训练轮数，train中所有样本训练过一次算一轮</span>
num_epochs <span class="token operator">=</span> <span class="token number">10</span>  
<span class="token comment"># 学习率，一个较大的学习率会导致振荡，1e-3和1e-4是个合适的值</span>
learning_rate <span class="token operator">=</span> <span class="token number">1e-3</span>  
<span class="token comment"># 定义我们的模型</span>
model <span class="token operator">=</span> CNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  
<span class="token comment"># 下面是全连接网络，切换网络时改变注释即可</span>
<span class="token comment"># model = Liner().to(device)  </span>
<span class="token comment"># 采用torch包内的交叉熵损失函数</span>
<span class="token comment"># 评估你模型的优劣，为下一步训练提供更新依据</span>
criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token comment"># 梯度更新器，选用Adam方法，这是一个比较快速的梯度下降方法</span>
<span class="token comment"># 可以理解为他会根据你前一步的损失，考虑多大程度地改变模型参数</span>
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span>  
<span class="token comment"># 制作数据集加载器，DataLoader同样是torch包内写好的</span>
train_data <span class="token operator">=</span> BirdDataset<span class="token punctuation">(</span>train_images<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset <span class="token operator">=</span> train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  
test_data <span class="token operator">=</span> BirdDataset<span class="token punctuation">(</span>test_images<span class="token punctuation">,</span> test_labels<span class="token punctuation">,</span> transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset <span class="token operator">=</span> test_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  
<span class="token comment"># 开始训练</span>
<span class="token comment"># 两层循环，第一层训练轮数</span>
<span class="token comment"># 第二层是对train进行的反复采样直到遍历完train</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>  
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Epoch [</span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num_epochs<span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">)</span>  
    <span class="token comment"># enumerate用于遍历train_loader这个序列</span>
    <span class="token comment"># 因为train_loader本身只能根据索引采样数据，所以需要enumerate提供遍历的索引</span>
    <span class="token keyword">for</span> batch_index<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> targets<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>  
        image <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  
        label <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  
        <span class="token comment"># 向前传播，计算得分，同时清空梯度，开始产生梯度计算图</span>
        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>  
        score <span class="token operator">=</span> model<span class="token punctuation">(</span>image<span class="token punctuation">)</span>  
        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>score<span class="token punctuation">,</span> label<span class="token punctuation">)</span>  
        <span class="token comment"># 向后传播</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>  
        <span class="token comment"># 更新模型参数</span>
        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>  
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loss: "</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
    <span class="token comment"># 下面是我们写的观察模型准确率的函数</span>
    train_accuracy <span class="token operator">=</span> check_accuracy<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>  
    test_accuracy <span class="token operator">=</span>  check_accuracy<span class="token punctuation">(</span>test_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此，整个模型训练就已经完成，下面附上检验正确率的函数，请你在模型训练前先对其声明</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check_accuracy</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>  
    num_correct <span class="token operator">=</span> <span class="token number">0</span>  
    num_samples <span class="token operator">=</span> <span class="token number">0</span>  
    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Checking accuracy on training data"</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>  
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Checking accuracy on test data"</span><span class="token punctuation">)</span>  
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>  
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Checking accuracy on validation data"</span><span class="token punctuation">)</span>  
  
    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> loader<span class="token punctuation">:</span>  
            x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  
            y <span class="token operator">=</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  
  
            scores <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  
            _<span class="token punctuation">,</span> predictions <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  
            num_correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predictions <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
            num_samples <span class="token operator">+=</span> predictions<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  
  
        <span class="token comment"># Calculate accuracy  </span>
        accuracy <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>num_correct<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span>num_samples<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>  
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Got </span><span class="token interpolation"><span class="token punctuation">&#123;</span>num_correct<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num_samples<span class="token punctuation">&#125;</span></span><span class="token string"> with accuracy </span><span class="token interpolation"><span class="token punctuation">&#123;</span>accuracy<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">%"</span></span><span class="token punctuation">)</span>  
  
    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> accuracy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后，你可以用你的模型对验证集进行预测，评估模型优劣</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">val_data <span class="token operator">=</span> BirdDataset<span class="token punctuation">(</span>val_images<span class="token punctuation">,</span> val_labels<span class="token punctuation">,</span> transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
val_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset <span class="token operator">=</span> val_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  
check_accuracy<span class="token punctuation">(</span>val_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果没有问题的话，你应该得到一个对训练集100%准确率，对测试集80%+接近90%的准确率。</p>
<h5 id="Step-6-探究全连接网络"><a href="#Step-6-探究全连接网络" class="headerlink" title="Step 6 探究全连接网络"></a>Step 6 探究全连接网络</h5><hr>
<p>我们已经训练出了一个卷积网络，现在我们来探究一下全连接网络的效果。<br>使用完卷积网络后，你可以切换到全连接网络进行训练，观察效果。<br>你应该会发现，全连接网络的准确率很难超过60%。</p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> os

<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> sympy <span class="token keyword">import</span> viete
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>backcompat <span class="token keyword">import</span> keepdim_warning
<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToTensor
<span class="token keyword">from</span> torch <span class="token keyword">import</span> cuda<span class="token punctuation">,</span> nn<span class="token punctuation">,</span> optim
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm

<span class="token keyword">def</span> <span class="token function">check_accuracy</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    num_correct <span class="token operator">=</span> <span class="token number">0</span>
    num_samples <span class="token operator">=</span> <span class="token number">0</span>
    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Checking accuracy on training data"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Checking accuracy on test data"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Checking accuracy on validation data"</span><span class="token punctuation">)</span>

    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> loader<span class="token punctuation">:</span>
            x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
            y <span class="token operator">=</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>

            scores <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
            _<span class="token punctuation">,</span> predictions <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            num_correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predictions <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            num_samples <span class="token operator">+=</span> predictions<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

        <span class="token comment"># Calculate accuracy</span>
        accuracy <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>num_correct<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span>num_samples<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Got </span><span class="token interpolation"><span class="token punctuation">&#123;</span>num_correct<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num_samples<span class="token punctuation">&#125;</span></span><span class="token string"> with accuracy </span><span class="token interpolation"><span class="token punctuation">&#123;</span>accuracy<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">%"</span></span><span class="token punctuation">)</span>

    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># Set the model back to training mode</span>
    <span class="token keyword">return</span> accuracy
<span class="token keyword">class</span> <span class="token class-name">Liner</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span><span class="token number">224</span><span class="token operator">*</span><span class="token number">224</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Liner<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

<span class="token keyword">class</span> <span class="token class-name">CNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_classes <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> in_channels <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>CNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> in_channels <span class="token punctuation">,</span> out_channels <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>pool1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels <span class="token operator">=</span> <span class="token number">16</span> <span class="token punctuation">,</span> out_channels <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>  kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">*</span> <span class="token number">112</span> <span class="token operator">*</span> <span class="token number">112</span><span class="token punctuation">,</span> out_features <span class="token operator">=</span>  num_classes<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

<span class="token keyword">class</span> <span class="token class-name">BirdDataset</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> images<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> transform<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>images <span class="token operator">=</span> images
        self<span class="token punctuation">.</span>labels <span class="token operator">=</span> labels
        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform <span class="token keyword">if</span> transform <span class="token keyword">else</span> ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>images<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        img_path <span class="token operator">=</span> self<span class="token punctuation">.</span>images<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        label <span class="token operator">=</span> self<span class="token punctuation">.</span>labels<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        label <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span>

        <span class="token comment"># 加载图像并转换为PIL图像</span>
        image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>

        <span class="token comment"># 应用变换</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">:</span>
            image <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>image<span class="token punctuation">)</span>

        <span class="token comment"># 返回图像数据和对应标签</span>
        <span class="token keyword">return</span> image<span class="token punctuation">,</span> label


path <span class="token operator">=</span> <span class="token string">"Bird Species Dataset"</span>
<span class="token comment"># 假设您的图片都存储在一个名为 'data' 的文件夹下</span>
data_dir <span class="token operator">=</span> path
images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>data_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> f <span class="token keyword">in</span> files<span class="token punctuation">:</span>
        <span class="token keyword">if</span> f<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> f<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.png'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
            <span class="token comment"># 子目录名称作为标签</span>
            label <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>root<span class="token punctuation">)</span>
            images<span class="token punctuation">.</span>append<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span>
            labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>
le <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>
encoded_labels <span class="token operator">=</span> le<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>
<span class="token comment"># 第一步：先将整个数据集划分为训练集和其他(这里包括验证集+测试集)</span>
train_images<span class="token punctuation">,</span> temp_images<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> tmp_labels <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>images<span class="token punctuation">,</span> encoded_labels<span class="token punctuation">,</span>
                                                                       test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> stratify<span class="token operator">=</span>labels<span class="token punctuation">)</span>  <span class="token comment"># 70% 训练, 30% 其他</span>

<span class="token comment"># 第二步：从剩余的数据集中再划分出验证集和测试集</span>
val_images<span class="token punctuation">,</span> test_images<span class="token punctuation">,</span> val_labels<span class="token punctuation">,</span> test_labels  <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>temp_images<span class="token punctuation">,</span> tmp_labels<span class="token punctuation">,</span>
                                                                     test_size<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span> stratify<span class="token operator">=</span>tmp_labels<span class="token punctuation">)</span>  <span class="token comment"># 15% 验证, 15% 测试</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"训练集大小: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_images<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"验证集大小: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>val_images<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"测试集大小: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>test_images<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>

train_data <span class="token operator">=</span> BirdDataset<span class="token punctuation">(</span>train_images<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>
batch_size <span class="token operator">=</span> <span class="token number">64</span>
num_epochs <span class="token operator">=</span> <span class="token number">10</span>
learning_rate <span class="token operator">=</span> <span class="token number">1e-3</span>
model <span class="token operator">=</span> CNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
<span class="token comment"># model = Liner().to(device)</span>
criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span>
train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset <span class="token operator">=</span> train_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
test_data <span class="token operator">=</span> BirdDataset<span class="token punctuation">(</span>test_images<span class="token punctuation">,</span> test_labels<span class="token punctuation">,</span> transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset <span class="token operator">=</span> test_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Epoch [</span><span class="token interpolation"><span class="token punctuation">&#123;</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>num_epochs<span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> batch_index<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> targets<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>
        image <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        label <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>
        score <span class="token operator">=</span> model<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>score<span class="token punctuation">,</span> label<span class="token punctuation">)</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loss: "</span><span class="token punctuation">,</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    train_accuracy <span class="token operator">=</span> check_accuracy<span class="token punctuation">(</span>train_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    test_accuracy <span class="token operator">=</span>  check_accuracy<span class="token punctuation">(</span>test_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>

val_data <span class="token operator">=</span> BirdDataset<span class="token punctuation">(</span>val_images<span class="token punctuation">,</span> val_labels<span class="token punctuation">,</span> transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
val_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset <span class="token operator">=</span> val_data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
check_accuracy<span class="token punctuation">(</span>val_loader<span class="token punctuation">,</span> model<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>deep-learning</category>
      </categories>
      <tags>
        <tag>deep-learning, pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>类-L1-初步认识</title>
    <url>/yongxu.github.io/2024/10/22/c++L1%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<h4 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a><strong>类的概念</strong></h4><hr>
<p>类是面向对象编程的核心。我喜欢把类理解为一组数据和一个接口。例如机器人可以是一个类，他有一些数据，如颜色、大小、型号等，还有一个接口，如移动、转动、开关等。<br>类可以包含成员变量、成员函数、构造函数、析构函数等。成员变量是类的状态，成员函数是类的行为。</p>
<h4 id="类的声明和定义"><a href="#类的声明和定义" class="headerlink" title="类的声明和定义"></a><strong>类的声明和定义</strong></h4><hr>
<p>通常我们将类的定义放在头文件，而类行为的实现放在源文件中。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Robot</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// private:  声明成员变量</span>
    <span class="token comment">// 禁止直接访问，只能通过接口函数访问</span>
    <span class="token comment">// 在初始化时，通过构造函数初始化</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        string color<span class="token punctuation">;</span>
        <span class="token keyword">float</span> size<span class="token punctuation">;</span>
        <span class="token keyword">float</span> position<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> rotation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// public:  声明接口函数</span>
    <span class="token comment">// 允许直接访问，可以被其他函数调用</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment">/*
         构造函数
         构造函数的作用是初始化类的状态
         初始化方法：
            直接初始化，如：Robot r("red", 1.0);
            通过参数初始化，如：Robot r = Robot("red", 1.0);
        */</span>
        <span class="token function">Robot</span><span class="token punctuation">(</span>string c<span class="token punctuation">,</span> <span class="token keyword">float</span> s<span class="token punctuation">,</span> <span class="token keyword">float</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">float</span> r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
         析构函数
         析构函数的作用是释放类的资源（定义类的程序块结束后）
         一般不需要内容，除非使用new申请了内存需要手动释放
         */</span>
        <span class="token operator">~</span><span class="token function">Robot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

下面是类的实现：
<span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">Robot</span><span class="token punctuation">(</span>string c<span class="token punctuation">,</span> <span class="token keyword">float</span> s<span class="token punctuation">,</span> <span class="token keyword">float</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">float</span> r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    color <span class="token operator">=</span> c<span class="token punctuation">;</span>
    size <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Robot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 释放内存</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> z<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> z<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"color: "</span> <span class="token operator">&lt;&lt;</span> color <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size: "</span> <span class="token operator">&lt;&lt;</span> size <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"position: "</span> <span class="token operator">&lt;&lt;</span> position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"rotation: "</span> <span class="token operator">&lt;&lt;</span> rotation<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> rotation<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> rotation<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上是类的声明和定义，我们可以看到，类中包含了一些成员变量，以及一些接口函数。</p>
<pre class="line-numbers language-none"><code class="language-none">怎么理解接口？
接口是服务端为客户端封装好的，客户端只需要调用接口函数，就能完成某些功能。
服务端的责任是实现一些函数，并详细告知如何调用这些函数，以达到客户自己的目的。
而客户端的任务就是详细阅读接口文档，并调用接口函数，完成自己的需求。
所以，接口是服务端和客户端之间沟通的桥梁。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="如何使用类"><a href="#如何使用类" class="headerlink" title="如何使用类"></a><strong>如何使用类</strong></h4><hr>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> potions<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> rotation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 类的创建和结构类似</span>
Robot <span class="token function">robot</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 下面的创造方法实际上生成了一个临时对象，并将其赋值给了robot2</span>
Robot robot2 <span class="token operator">=</span> <span class="token function">Robot</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 我们也可以定义一个指针变量指向类对象，但最后需要手动释放内存，因为析构函数没有delete</span>
Robot <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Robot</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果没有定义构造函数，可以不进行初始化赋值</span>
Robot empty<span class="token punctuation">;</span>
<span class="token comment">// 但如果已经定义了构造函数，这样的初始化是非法的。</span>
<span class="token comment">// 但我们可以通过函数重载来使其合法</span>
<span class="token comment">// 在类声明中，我们可以定义一个空参数的构造函数Robot();</span>

<span class="token comment">// 在c++11中，我们可以用列表初始化的方式来初始化类对象</span>
<span class="token comment">// 这需要列表内参数和某个构造函数参数一致</span>
Robot robot3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Robot robot4<span class="token punctuation">&#123;</span><span class="token string">"black"</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 我们可以通过.来访问类的成员函数</span>
robot<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
robot<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
robot<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 但当我们使用const来修饰类对象时，我们不能调用类的成员函数</span>
<span class="token comment">// 因为成员函数可能修改类的状态，而const对象不能修改状态</span>
<span class="token comment">// 所以我们可以将某些成员函数声明为const，这样就可以在const对象上调用</span>
<span class="token keyword">const</span> Robot robot5 <span class="token operator">=</span> robot<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// 将shoow最后加上const，表示该函数不修改类的状态，即可被调用</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a><strong>this指针</strong></h4><hr>
<p>this指针是一个隐含的指针，指向当前对象的地址。在类的成员函数中，我们可以通过this指针来访问类的成员变量。<br>假如我们想让一个类的成员函数返回这个类本身，我们可以用this指针来实现。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 第一个Robot表明这是函数的返回值类型</span>
<span class="token comment">// 第二个Robot表明这是Robot类的一个成员函数</span>
<span class="token keyword">const</span> Robot<span class="token operator">&amp;</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">returnthisrobot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h4><hr>
<p>为什么定义类的成员函数是要加上类名称<code>Robot::</code>呢？<br>原因是我们声明成员函数时，是在类内进行的，所以作用域局限在类内。<br>因此在类外进行定义时，需要加上类名称。<br>这也就意味着我们可以在类外定义另一个同名函数，而不会与类的成员函数冲突。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>那为什么在类的成员函数中，我们可以直接使用类内的成员变量呢？<br>原因是成员函数都是内联函数，因此编译器会将函数体内的变量直接替换成内存地址，因此可以直接访问。</p>
<p>至于类的声明周期，前文提过，当创造类的程序块结束时，类的析构函数会自动调用，释放类占用的资源。</p>
<pre class="line-numbers language-none"><code class="language-none">如何在类内定义常量？
&#96;&#96;&#96;cpp
private:
    const int max_size &#x3D;  100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>这样的方法是不行的，因为类声明时并没有存储空间，因此无法存储常量。
正确的方法是：
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> max_size <span class="token operator">=</span>  <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
这样的声明方式会在整个程序中创建一个常量，因此可以被所有对象共享。
</code></pre>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>c++笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>类-L2-重载&amp;&amp;友元函数</title>
    <url>/yongxu.github.io/2024/11/13/c++L2%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="“重载”定义"><a href="#“重载”定义" class="headerlink" title="“重载”定义"></a><strong>“重载”定义</strong></h3><p>c++语法中有基本的运算符，例如+、-、&lt;&lt;等。但他们使用的对象一般都是常规变量，例如int、float这样的类型。<br>如果我们希望将两个类相加（例如目的可能是将类的某些private值相加，并形成一个新的类），这时候我们就无法使用+来进行，因此我们需要<strong>重载</strong>运算符，使得运算符<strong>根据操作数的类型</strong>来选择运算逻辑。</p>
<h3 id="重载使用实例"><a href="#重载使用实例" class="headerlink" title="重载使用实例"></a><strong>重载使用实例</strong></h3><p>下面我们给出一个类定义：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Time</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> hour<span class="token punctuation">;</span>
    <span class="token keyword">int</span> minute<span class="token punctuation">;</span>
    <span class="token keyword">int</span> second<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Time</span><span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        hour <span class="token operator">=</span> h<span class="token punctuation">;</span>
        minute <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token operator">~</span><span class="token function">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    Time <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Time<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
        Time sum<span class="token punctuation">;</span>
        sum<span class="token punctuation">.</span>mintue <span class="token operator">=</span> minute <span class="token operator">+</span> t<span class="token punctuation">.</span>minute<span class="token punctuation">;</span>
        sum<span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token punctuation">(</span>hour <span class="token operator">+</span> t<span class="token punctuation">.</span>hour <span class="token operator">+</span> sum<span class="token punctuation">.</span>minute <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">;</span>
        sum<span class="token punctuation">.</span>minute <span class="token operator">=</span> sum<span class="token punctuation">.</span>minute <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">.</span>minute<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时我们就对”+”运算符进行了重载，使得它可以对两个Time类对象进行相加操作。<br>重载使用的基本模式如下：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">类名 <span class="token keyword">operator</span>符号<span class="token punctuation">(</span><span class="token keyword">const</span> 类名<span class="token operator">&amp;</span> 参数名<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 重载逻辑</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中，类名是操作符所作用的类名，符号是重载的运算符，参数名是操作符所需要的另一个类名。<br>重载运算符有两种使用方式<br>一种是将其当成成员变量使用<br>另一种是将其当成”+”运算符使用</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Time <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Time <span class="token function">t2</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Time t3 <span class="token operator">=</span> ti<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
Time t4 <span class="token operator">=</span> t1 <span class="token operator">+</span> t2<span class="token punctuation">;</span> <span class="token comment">// 等价于t3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，当使用t1+t2时，t1是调用对象，而t2是传递的参数。<br>因为返回的值是Time，所以我们可以连用+运算符。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Time t5 <span class="token operator">=</span> t1 <span class="token operator">+</span> t2 <span class="token operator">+</span> t3<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个语句的转化流程为</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Time t5 <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>t2<span class="token operator">+</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-></span>
Time t5 <span class="token operator">=</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>t2<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 因此是可行的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a><strong>友元函数</strong></h3><p>让我们考虑一种重载，假设我们重载了*运算符，使得它可以对两个Time类对象进行相乘操作。<br>这里我们先不考虑这个返回值的意义。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Time <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    Time product<span class="token punctuation">;</span>
    product<span class="token punctuation">.</span>hour <span class="token operator">=</span> hour <span class="token operator">*</span> n<span class="token punctuation">;</span>
    product<span class="token punctuation">.</span>minute <span class="token operator">=</span> minute <span class="token operator">*</span> m<span class="token punctuation">;</span>
    <span class="token keyword">return</span> product<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们可以这样使用这个重载</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Time <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Time t2  <span class="token operator">=</span> t1 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 等价于t1.operator*(2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但是，如果我们交换乘法顺序，会怎么样呢？</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Time t3 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> t1<span class="token punctuation">;</span> <span class="token comment">// ???我们说过*左边是调用对象，但此时左边是2，显然不符合规则。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这时候，我们就需要考虑到<strong>友元函数</strong>的概念。<br>我们将新定义一个友元重载函数，将Time和int类都当作参数，传出新的Time对象。<br>之所以不使用普通的函数，是因为普通函数无法访问类的私有成员。<br>所以我们需要一个类的“友好”的函数，可以让他访问类的私有成员。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 友元函数的声明需要放在类的声明内</span>
<span class="token keyword">friend</span> Time <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Time<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 定义时不需要friend关键字,也不需要定义域Time::</span>
Time <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Time<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Time product<span class="token punctuation">;</span>
    product<span class="token punctuation">.</span>hour <span class="token operator">=</span> t<span class="token punctuation">.</span>hour <span class="token operator">*</span> n<span class="token punctuation">;</span>
    product<span class="token punctuation">.</span>minute <span class="token operator">=</span> t<span class="token punctuation">.</span>minute <span class="token operator">*</span> n<span class="token punctuation">;</span>
    <span class="token keyword">return</span> product<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>友元函数在使用时，会自动将前后的两个类当作参数，并调用友元函数。<br>t1<em>2 -&gt; operator</em>(t1, 2);</p>
<h3 id="常见友元函数"><a href="#常见友元函数" class="headerlink" title="常见友元函数"></a>常见友元函数</h3><p>我们还可以对&lt;&lt;运算符进行重载，使得它可以输出Time类的对象。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Time<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    os <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>hour <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">.</span>minute<span class="token punctuation">;</span>
    <span class="token keyword">return</span> os<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面对代码进行解释。<br>一般我们使用的cout语句，cout其实是ostream类的一个对象,&lt;&lt;是一个被其重载的运算符，后面的变量或常量就是参数。<br>因此cout &lt;&lt; x 的本质就是调用了x的operator&lt;&lt;函数，而函数实现就是打印变量的值。<br>之所以返回ostream&amp;，是为了连用&lt;&lt;运算符。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Time <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> t1<span class="token punctuation">;</span> <span class="token comment">// 输出10:30</span>
Time <span class="token function">t2</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> t1 <span class="token operator">&lt;&lt;</span> t2<span class="token punctuation">;</span> <span class="token comment">// 输出10:3015:45</span>
<span class="token comment">// cout &lt;&lt; t1返回还是cout, 所以可以继续cout &lt;&lt; t2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于&lt;&lt;的重载，我们必须使用友元函数，不然的话，这个运算符的使用就会很奇怪<br>t1 &lt;&lt; cout -&gt; ti.operator&lt;&lt;(cout)<br>因此我们使用友元函数。</p>
]]></content>
      <categories>
        <category>c++笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>类-L3-继承</title>
    <url>/yongxu.github.io/2024/11/13/c++L3%E7%B1%BB%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>c++笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>激光对抗小车开发日志</title>
    <url>/yongxu.github.io/2025/03/02/%E6%BF%80%E5%85%89%E5%AF%B9%E6%8A%97%E5%B0%8F%E8%BD%A6%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h2 id="2-25-3-2"><a href="#2-25-3-2" class="headerlink" title="2.25-3.2"></a>2.25-3.2</h2><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>确认选题后进行了简单的组内分工，我负责定位导航系统以及视觉识别跟踪系统，同时学习控制部分。<br>感觉任务还是蛮重的，但我的想法也好多好多，很多比较先进的算法也不知道能不能做得出来，比如其实我还挺想做最优控制的，用这个来控制激光器跟踪应该会很丝滑。<br>视觉上我也超想跑一个slam实践一下，或者搞个激光雷达玩玩。</p>
<p>但后几天的调研发现这些方案太贵了，而且或许没太大必要性，我们有更好的定位方案。或许还是识别小车更重要一点。</p>
<h3 id="工作进度"><a href="#工作进度" class="headerlink" title="工作进度"></a>工作进度</h3><ul>
<li>确定了几种可行的定位方案：imu惯性测量、两个激光测距定点、观察头顶的视觉slam、激光雷达。</li>
<li>调研了大批的开发板：jetson nano、jetson tx2、树莓派5b+kit、香橙派、爱思派。</li>
<li>配好了yolo环境，可以开始收集数据集训练网络了。</li>
</ul>
<h3 id="下周安排"><a href="#下周安排" class="headerlink" title="下周安排"></a>下周安排</h3><ul>
<li>定位方案不着急确定，可以一个一个尝试，看哪个方案最合适。</li>
<li>首要确定开发板，然后开始搭建开发环境，搭载yolo进行简单小车识别，考虑如何提前小车位置信息。</li>
<li>和老师同学交流，商讨数据集。</li>
<li>开题答辩ppt完成。</li>
</ul>
<h2 id="3-3-3-9"><a href="#3-3-3-9" class="headerlink" title="3.3-3.9"></a>3.3-3.9</h2><h3 id="工作进度-1"><a href="#工作进度-1" class="headerlink" title="工作进度"></a>工作进度</h3><ul>
<li>购买了jetson nano并进行了基本的环境配置和学习</li>
<li>部署了yolov5n模型，转到engine后，推理时间能达到33ms左右</li>
<li>向战队借了一个mind的USB工业相机，已配好驱动</li>
<li>使用coco数据集训练的yolov5n，从相机取流推理跑通，帧率只有16左右，原因在于pre_process和取流</li>
<li>将取流与预处理、推理分成两个进程处理，并行或许能达到更高的帧率，正在debug进程通信问题</li>
</ul>
<h3 id="下周安排-1"><a href="#下周安排-1" class="headerlink" title="下周安排"></a>下周安排</h3><ul>
<li>跑通多进程处理方案，效果应该会更好</li>
<li>尝试通过载板pin口驱动舵机，尝试相机跟踪人脸</li>
<li>调试相机参数，获取更高的画面质量</li>
<li>考虑开始写ros架构</li>
</ul>
<h3 id="本周总结"><a href="#本周总结" class="headerlink" title="本周总结"></a>本周总结</h3><p>基本完成上周任务，数据集问题还没确定，主要是目标区域贴纸老师们还没确定，所以数据集还没准备好。</p>
<h2 id="3-10-3-16"><a href="#3-10-3-16" class="headerlink" title="3.10-3.16"></a>3.10-3.16</h2><h3 id="工作进度-2"><a href="#工作进度-2" class="headerlink" title="工作进度"></a>工作进度</h3><ul>
<li>跑通了python的双进程，现在能稳定在25fps勉强够用，识别进度先推到这里</li>
<li>发现jetson nano国产板子没法支持输出PWM, 所以舵机测试先搁置了</li>
<li>相机参数设置和ros架构搁置了</li>
<li>拿到了stm32和四个直流电机，准备尝试串口和驱动底盘</li>
</ul>
<h3 id="下周安排-2"><a href="#下周安排-2" class="headerlink" title="下周安排"></a>下周安排</h3><ul>
<li>串口通信，尝试驱动底盘</li>
<li>学习尝试ros架构</li>
</ul>
<h3 id="本周总结-1"><a href="#本周总结-1" class="headerlink" title="本周总结"></a>本周总结</h3><p>本周工作量较小，主要是去搞了战队的事情。和师兄交流说是电控比较重要，接下来会把重心放在这里。</p>
<h2 id="3-17-3-23"><a href="#3-17-3-23" class="headerlink" title="3.17-3.23"></a>3.17-3.23</h2><h3 id="工作进度-3"><a href="#工作进度-3" class="headerlink" title="工作进度"></a>工作进度</h3><ul>
<li>底盘驱动完成，通过编码器算出速度作为反馈，控制量为PWM信号</li>
<li>配置了遥控器，完成了遥控移动</li>
<li>和控院同学讨论了地盘和云台分离结构的可行性以及成本，估计要废弃小陀螺运动</li>
</ul>
<h3 id="本周总结-2"><a href="#本周总结-2" class="headerlink" title="本周总结"></a>本周总结</h3><p>底盘控制基本完成，遥控虽然头疼了好久，但好在也是完成了。<br>接下来就是云台控制部分、上下位机通信部分、定位导航测试（IMU、激光测距）<br>但现在云台的结构还没决定，周内需要进一步讨论，但感觉其他人都没啥想法，最后还是需要我自己想、自己拍定，有点头大。<br>先尝试解决导航定位问题，主要是涉及imu解码，再把拖了好久的上下位机串口通信给解决一下。<br>ros架构真的没时间管呀</p>
<h3 id="下周安排-3"><a href="#下周安排-3" class="headerlink" title="下周安排"></a>下周安排</h3><ul>
<li>确定云台结构</li>
<li>imu解码和编码器结合，惯性导航定位测试</li>
<li>串口通信</li>
</ul>
<h2 id="3-24-4-1"><a href="#3-24-4-1" class="headerlink" title="3.24-4.1"></a>3.24-4.1</h2><h3 id="工作进度-4"><a href="#工作进度-4" class="headerlink" title="工作进度"></a>工作进度</h3><ul>
<li>放弃小陀螺方案</li>
<li>确定导航方案，2D激光雷达+IMU</li>
</ul>
<h3 id="本周总结-3"><a href="#本周总结-3" class="headerlink" title="本周总结"></a>本周总结</h3><p>主控板烧了，电控方面停滞一周进度。<br>小陀螺方案滑环和同步带结构太复杂且昂贵，同时收益很低，放弃。<br>购买了成品IMU组件，不需要自己做IMU解码，直接使用。<br>导航定位方案确定，但需要进一步调研。</p>
<h3 id="下周安排-4"><a href="#下周安排-4" class="headerlink" title="下周安排"></a>下周安排</h3><ul>
<li>跑通激光雷达和IMU的联合建图</li>
</ul>
<h2 id="4-2-4-28"><a href="#4-2-4-28" class="headerlink" title="4.2 - 4.28"></a>4.2 - 4.28</h2><h3 id="工作进度-5"><a href="#工作进度-5" class="headerlink" title="工作进度"></a>工作进度</h3><ul>
<li>完成建图、定位导航部分</li>
<li>完成串口通信，导航可以跑通</li>
<li>完成云台控制部分，云台可以转动</li>
</ul>
<h3 id="下周安排-5"><a href="#下周安排-5" class="headerlink" title="下周安排"></a>下周安排</h3><ul>
<li>解决cmd_vel下发速度过低的问题，主要是local_planner路径太短</li>
<li>云台控制模块接入导航模块，尝试云台控制</li>
</ul>
]]></content>
      <categories>
        <category>开发日志</category>
      </categories>
      <tags>
        <tag>slam</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu开发知识记录</title>
    <url>/yongxu.github.io/2025/03/12/ubuntu%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="远程开发技巧"><a href="#远程开发技巧" class="headerlink" title="远程开发技巧"></a>远程开发技巧</h1><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>一般采用ssh协议，可以通过网线、otg和无线</p>
<h4 id="有线链接"><a href="#有线链接" class="headerlink" title="有线链接"></a>有线链接</h4><p>推荐使用网线，电脑没有网口可以买一个USB拓展坞，一般都带网口。<br>网线连接好两台设备后，先使用显示屏和键鼠连接一台设备，然后在另一台设备上输入<code>ifconfig</code>命令查看ip地址，注意不是wlan0的ip地址，而是网口分配的的ip地址。</p>
<pre class="line-numbers language-none"><code class="language-none">如果命令无效，根据报错apt install即可，如果是高版本ubuntu可能无法使用这个命令
如果有桌面，可以直接去网络设置中查看分配的ip地址，也可以设置一个好记的地址方便记忆。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后在另一台设备上输入<code>ssh 用户名@ip地址</code>命令进行远程连接，输入密码即可，注意用户名一定要正确。<br>如果使用otg线连接，此时需要的ip地址是主机ip地址，注意区分和网口连接的不同。</p>
<h4 id="无线连接"><a href="#无线连接" class="headerlink" title="无线连接"></a>无线连接</h4><p>两台设备处于同一局域网，可以直接使用无线连接，不需要网线。<br>首先查看路由器给嵌入式设备分配的ip，此时是wlan0的ip地址。<br>然后在另一台设备上输入<code>ssh 用户名@wlan0的ip地址</code>命令进行远程连接，输入密码即可。</p>
<p>注意<strong>所有ip地址都是ipv4地址，ipv6地址不适用.</strong></p>
<h2 id="scp数据传输"><a href="#scp数据传输" class="headerlink" title="scp数据传输"></a>scp数据传输</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 将本地文件上传远程
scp 本地文件路径 用户名@ip地址:远程文件路径 
# 拉取远程文件至本地 
scp 用户名@ip地址:远程文件路径 本地文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h1><h2 id="Yolo系列模型转换方法"><a href="#Yolo系列模型转换方法" class="headerlink" title="Yolo系列模型转换方法"></a>Yolo系列模型转换方法</h2><p>首先确保环境已经正确安装。<br>到<a href="https://docs.ultralytics.com/zh#yolo-a-brief-history">yolo官网</a>了解各个模型推理时间和准确度的情况，再根据网上资料确定自己所需的yolo版本。如果需要自己训练，需要下载对应版本的GitHub仓库里的代码，按照说明进行训练。如果不需要训练，直接下载.pt权重文件即可。</p>
<h4 id="使用tensorrtx转换模型"><a href="#使用tensorrtx转换模型" class="headerlink" title="使用tensorrtx转换模型"></a>使用tensorrtx转换模型</h4><p>前往<a href="https://github.com/wang-xinyu/tensorrtx">tensorrtx</a>github仓库，里面有对应各个模型版本的文件夹，例如点入yolov5，进入yolov5文件夹，可以看到readme文件，里面有详细的转换方法。</p>
<pre class="line-numbers language-none"><code class="language-none">需要注意的是，yolo系列除了大版本，例如yolov5、yolov8之外，还有小版本区分，
例如yolov5 version 5.0、yolov5 version 6.0等，同时还有不同大小的网络结构，
比如yolov5l，yolov5m，yolov5s等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>一般来说，你先根据你yolo.pt文件的version版本，选择对应的tensorrtx版本，<br>git clone 下载yolo仓库和tensorrtx仓库，然后进入tensorrtx&#x2F;yolovX文件夹，<br>根据说明，执行get_wts.py脚本，将pt文件转化为wts文件，然后再将编译tensorrtx，在yolovX目录下</p>
<pre class="line-numbers language-none"><code class="language-none">mkdir build
cd build
cmake..
make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行完上述命令后，根据说明，执行yolovX的文件，就可以将wts文件转换为engine文件，完成模型转换。<br>可以采用tensorrtx给的测试文件，看下模型加载是否正确，推理时间是否得到优化。<br>后续需要加载模型推理也可以直接抄这个测试文件。</p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="动态链接库问题"><a href="#动态链接库问题" class="headerlink" title="动态链接库问题"></a>动态链接库问题</h2><p>使用ananconda进行环境管理时，cmake项目时，可能会产生动态库链接问题，即系统版本库文件和anaconda版本库文件不匹配。</p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><ul>
<li>进入ananconda的lib文件夹，删除不匹配的库文件，并将系统库文件链接到anaconda库文件上。</li>
</ul>
<h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><p>以libwayland-client.so.0为例，系统版本为&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd"># 用内置命令ldd查看出现问题的libwayland-client.so.0当中，所依赖的ffi这个库的叫什么。
ldd &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libwayland-client.so.0 | grep ffi
# 查看系统的libffi
ll &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F; | grep ffi
# 查看Anaconda的libffi
ll ~&#x2F;anaconda3&#x2F;lib&#x2F; | grep ffi
# 可能会发现这两个库的版本不一致，删除anaconda的libffi，并将系统的libffi链接到anaconda的libffi上。
# 假设系统版本的libffi指向了7.1, anaconda为8.1
rm ~&#x2F;anaconda3&#x2F;lib&#x2F;libffi.so.7 #虽然它是so.7，但他指向了8.1的版本，所以需要重新指向。
# 让conda的libffi指向系统的libffi
ln -s &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libffi.so.7.1 ~&#x2F;anaconda3&#x2F;lib&#x2F;libffi.so.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="引导文件损坏问题"><a href="#引导文件损坏问题" class="headerlink" title="引导文件损坏问题"></a>引导文件损坏问题</h2><p>首先需要一个引导系统，可以选择U盘作为引导，上网搜一下教程，再U盘中下载一个对应ubuntu系统的镜像文件即可。<br>然后进入电脑BIOS界面，将U盘的启动方式排在最前面，然后重启电脑。<br>接下来你就会进入ubuntu系统，进入后点击 try ubuntu，即可进行引导文件修复。</p>
<h3 id="手动修复"><a href="#手动修复" class="headerlink" title="手动修复"></a>手动修复</h3><p>打开命令行，输入以下命令：</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">sudo fdisk -l # 查看U盘的分区情况，确定系统文件分区和引导文件分区（EFI分区）的编号。
sudo mount &#x2F;dev&#x2F;sda1（改成你对应的分区） &#x2F;mnt # 将系统文件分区挂载到&#x2F;mnt目录下，目的是待会需要进入系统文件分区。
# 再挂载其他文件夹
sudo mount --bind &#x2F;dev &#x2F;mnt&#x2F;dev
sudo mount --bind &#x2F;dev&#x2F;pts &#x2F;mnt&#x2F;dev&#x2F;pts
sudo mount --bind &#x2F;proc &#x2F;mnt&#x2F;proc
sudo mount --bind &#x2F;sys &#x2F;mnt&#x2F;sys
# 再挂载EFI分区
mount &#x2F;dev&#x2F;sda2 &#x2F;boot&#x2F;efi # 假设EFI分区的编号为2，将EFI分区挂载到&#x2F;boot&#x2F;efi目录下，如果没有这个efi目录就新建，如果boot单独分区，也需要挂载。
# 挂载完成后，进入&#x2F;mnt，切换到系统盘
chroot &#x2F;mnt # 切换到系统盘
# 下载引导文件
grub-install &#x2F;dev&#x2F;sda # sda为硬盘名，安装引导文件到EFI分区
sudo update-grub # 更新grub
# 退出
exit
# 保存修改
sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重启电脑，拔下启动U盘，最好进入BIOS界面将硬盘启动优先级改成最高，即可进入系统。</p>
<h3 id="自动修复"><a href="#自动修复" class="headerlink" title="自动修复"></a>自动修复</h3><p>如果多次手动修复无效，可以尝试使用自动修复脚本。</p>
<pre class="line-numbers language-none"><code class="language-none"># 添加软件源
sudo add-apt-repository ppa:yannubuntu&#x2F;boot-repair
sudo apt-get update
# 安装软件
sudo apt-get install -y boot-repair
# 运行修复脚本
sudo boot-repair
# 之后会问你系统盘在不在移动硬盘，如果在就选择对应的硬盘，不在就选no
# 其他的都不用管，选继续修复即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修复成功后会显示success，重启电脑即可，同时进入BIOS界面将对应系统盘的硬盘作为启动盘。</p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>MonoGS阅读笔记</title>
    <url>/yongxu.github.io/2025/03/24/MonoGS%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="框架思路与原理"><a href="#框架思路与原理" class="headerlink" title="框架思路与原理"></a>框架思路与原理</h2><p>这是一个<strong>完全基于梯度下降</strong>做优化的框架，流程为产生高斯点、高斯点投影到图像、优化相机位姿、优化高斯点属性。</p>
<h4 id="产生高斯点"><a href="#产生高斯点" class="headerlink" title="产生高斯点"></a>产生高斯点</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>高斯点由点云生成，点云即每个像素点随机产生一个深度信息，投影到世界坐标系即可（如果由深度信息，就不会随机产生）。<br>拥有点云后进行一个下采样，减少点云密度，并由赋给新点云透明度、rot等属性，成为高斯点。</p>
<h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><p>优化分为生长和去除。<br>高斯点的生长又分为克隆和分裂，主要针对梯度较大区域</p>
<ul>
<li>区域高斯点面积大：分裂成n个小高斯点，提高这个区域的分辨率</li>
<li>区域高斯点面积小：克隆至n个小高斯点，提高这个区域的分辨率<br>高斯点生长完后，再进行去除，即计算每个高斯点的透明度，去除透明的高斯点。</li>
</ul>
<h4 id="高斯点投影到图像"><a href="#高斯点投影到图像" class="headerlink" title="高斯点投影到图像"></a>高斯点投影到图像</h4><p>3dgs核心，主要工作是</p>
<ul>
<li>将3D高斯投影到2D，同时计算协方差（协方差表征高斯点面积）</li>
<li>计算每一个像素点受所有高斯点的影响，生成渲染图</li>
</ul>
<h4 id="优化相机位姿（前端）"><a href="#优化相机位姿（前端）" class="headerlink" title="优化相机位姿（前端）"></a>优化相机位姿（前端）</h4><p>获取到图像后，使用了两个掩膜去滤去不关注的background，然后<strong>直接计算渲染图和真实图的像素L1距离</strong>作为损失函数，使用Adam优化器进行优化。<br>注意，此时只优化了相机位姿以及<strong>曝光</strong>。</p>
<h4 id="优化高斯点属性（后端）"><a href="#优化高斯点属性（后端）" class="headerlink" title="优化高斯点属性（后端）"></a>优化高斯点属性（后端）</h4><h5 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h5><p>对第一帧进行较长时间优化，可以获得比较好的高斯点状态，然后再回到前端，准备给GUI推送实时渲染画面。</p>
<h5 id="维护关键帧"><a href="#维护关键帧" class="headerlink" title="维护关键帧"></a>维护关键帧</h5><p>后端维护关键帧，只有当前端推送关键帧时，对所有关键帧一起优化，并随机额外抽取视点进行优化。<br>同样采用渲染图与真实图的像素L1距离作为损失函数，使用Adam优化器进行优化。<br>优化参数包括高斯点的位置、尺度、颜色、透明度、旋转角度等。</p>
<ul>
<li>每优化一定轮次（default&#x3D;150）进行高斯点更新，即高斯点的生长和去除。</li>
<li>每优化一定伦茨（default&#x3D;500）进行高斯点透明度激活，通过一个激活函数修改透明度。</li>
<li>每优化一定轮次完全重置透明度。</li>
</ul>
<h2 id="代码流程和框架"><a href="#代码流程和框架" class="headerlink" title="代码流程和框架"></a>代码流程和框架</h2><p>总共三个进程:前端（主进程）、后端、GUI（可关闭）。<br>主进程结束后会进入结果评估。</p>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>初始化流程待续。</p>
<ul>
<li>等待vis2main队列数据（GUI界面数据，即是否暂停）</li>
<li>先推送第一帧至后端，等待后端完成1050轮的初始化</li>
<li>等待完毕<ul>
<li>通过Camera类获取相机数据（内参和色彩、位姿、像素深度真值）</li>
<li>计算梯度</li>
<li><strong>tracking</strong><ul>
<li>将上一帧位姿作为初值</li>
<li>配置求解器</li>
<li>迭代求解，将高斯点渲染成二维图，计算像素的L1距离作为损失函数，仅更新相机位姿和曝光</li>
<li>每十轮输出到GUI显示</li>
</ul>
</li>
<li>结果推送给GUI显示</li>
<li>是否送入滑动窗口给后端优化<ul>
<li>先判断是否为关键帧，根据视场重叠情况（高斯点的n_touched的相似度）、两关键帧时间间隔</li>
<li>整理滑动窗口</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ul>
<li>等待后端队列更新（前端调用request请求时写入）</li>
<li>等待到关键帧请求<ul>
<li>add_next_kf函数添加关键帧<ul>
<li>生成点云数据，下采样后制成高斯点</li>
<li>传入优化器等待优化</li>
</ul>
</li>
<li>读取滑动窗口所有相机位姿和曝光，建立Adam优化器</li>
<li>调用map进行优化（若是最后一个关键帧，会进行特殊优化）<ul>
<li>所有关键帧渲染损失叠加</li>
<li>随机选择其他视点渲染损失</li>
<li>若满足一定轮数，进行高斯点生长和去除</li>
<li>若满足一定论述，进行高斯点透明度激活、重置</li>
<li>跟新高斯点和相机位姿</li>
</ul>
</li>
<li>将结果推送到前端（主要是优化后的高斯点数据）</li>
</ul>
</li>
</ul>
<h4 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h4><p>待续</p>
<h2 id="高斯渲染依赖库"><a href="#高斯渲染依赖库" class="headerlink" title="高斯渲染依赖库"></a>高斯渲染依赖库</h2><p>这套框架的渲染模型完全基于<a href="https://github.com/graphdeco-inria/diff-gaussian-rasterization">Differential Gaussian Rasterization</a>这个开源库<br>下面为该开源库的学习笔记。</p>
<h4 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h4><p>这个库层层嵌套，接口为python编写，实际将一个c++函数绑定到python接口，而c++函数又调用了cuda编写的函数文件。<br>调用路径为:<br>   init.py(rasterize_gaussians)<br>-&gt; ext.cpp(绑定c++函数RasterizeGaussiansCUDA)<br>-&gt; rasterize_points.cu(继续调用CudaRasterizer::Rasterizer::forward)<br>-&gt; rasterizer_impl.cu(高斯渲染全过程，先preprocess预处理，最后调用render进行渲染)<br>-&gt; forward.cu(绝大多数底层算法都在这里)<br>以上均为<strong>前端</strong>调用过程，后端调用基本一致。</p>
<h4 id="前端算法细节"><a href="#前端算法细节" class="headerlink" title="前端算法细节"></a>前端算法细节</h4><h5 id="preprocess"><a href="#preprocess" class="headerlink" title="preprocess"></a>preprocess</h5><p>3D-&gt;2D投影</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 世界坐标系3D坐标投影到图像坐标系，归一化，并保留z，在渲染时判断遮挡关系需要。
float3 p_orig &#x3D; &#123; orig_points[3 * idx], orig_points[3 * idx + 1], orig_points[3 * idx + 2] &#125;;
float4 p_hom &#x3D; transformPoint4x4(p_orig, projmatrix);
float p_w &#x3D; 1.0f &#x2F; (p_hom.w + 0.0000001f);
float3 p_proj &#x3D; &#123; p_hom.x * p_w, p_hom.y * p_w, p_hom.z * p_w &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>计算2D协方差</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> &#x2F;&#x2F; 计算雅可比矩阵，根据论文公式计算2D协方差
float3  t&#x3D; transformPoint4x3(mean, viewmatrix);

const float limx &#x3D; 1.3f * tan_fovx;
const float limy &#x3D; 1.3f * tan_fovy;
const float txtz &#x3D; t.x &#x2F; t.z;
const float tytz &#x3D; t.y &#x2F; t.z;
t.x &#x3D; min(limx, max(-limx, txtz)) * t.z;
t.y &#x3D; min(limy, max(-limy, tytz)) * t.z;

glm::mat3 J &#x3D; glm::mat3(
	focal_x &#x2F; t.z, 0.0f, -(focal_x * t.x) &#x2F; (t.z * t.z),
	0.0f, focal_y &#x2F; t.z, -(focal_y * t.y) &#x2F; (t.z * t.z),
	0, 0, 0);

glm::mat3 W &#x3D; glm::mat3(
	viewmatrix[0], viewmatrix[4], viewmatrix[8],
	viewmatrix[1], viewmatrix[5], viewmatrix[9],
	viewmatrix[2], viewmatrix[6], viewmatrix[10]);

glm::mat3 T &#x3D; W * J;

glm::mat3 Vrk &#x3D; glm::mat3(
	cov3D[0], cov3D[1], cov3D[2],
	cov3D[1], cov3D[3], cov3D[4],
	cov3D[2], cov3D[4], cov3D[5]);
&#x2F;&#x2F; 协方差公式 cov &#x3D; W * J * Vrk * (W * J)^T
glm::mat3 cov &#x3D; glm::transpose(T) * glm::transpose(Vrk) * T;

cov[0][0] +&#x3D; 0.3f;
cov[1][1] +&#x3D; 0.3f;
return &#123; float(cov[0][0]), float(cov[0][1]), float(cov[1][1]) &#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>至此获得所有2D高斯点位置和大小,可以进行渲染</p>
<h5 id="render"><a href="#render" class="headerlink" title="render"></a>render</h5><p>计算所有2D高斯点对每一个像素点的作用，生成渲染结果。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">
float2 xy &#x3D; collected_xy[j];
float2 d &#x3D; &#123; xy.x - pixf.x, xy.y - pixf.y &#125;;
float4 con_o &#x3D; collected_conic_opacity[j];
float power &#x3D; -0.5f * (con_o.x * d.x * d.x + con_o.z * d.y * d.y) - con_o.y * d.x * d.y;
if (power &gt; 0.0f)
	continue;

float alpha &#x3D; min(0.99f, con_o.w * exp(power));
if (alpha &lt; 1.0f &#x2F; 255.0f)
	continue;
float test_T &#x3D; T * (1 - alpha);
if (test_T &lt; 0.0001f)
&#123;
	done &#x3D; true;
	continue;
&#125;

&#x2F;&#x2F; Eq. (3) from 3D Gaussian splatting paper.
for (int ch &#x3D; 0; ch &lt; CHANNELS; ch++)
	C[ch] +&#x3D; features[collected_id[j] * CHANNELS + ch] * alpha * T;

T &#x3D; test_T;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="后端优化算法细节"><a href="#后端优化算法细节" class="headerlink" title="后端优化算法细节"></a>后端优化算法细节</h4><p>待续</p>
]]></content>
      <categories>
        <category>知识积累</category>
      </categories>
      <tags>
        <tag>3DGS</tag>
      </tags>
  </entry>
</search>
