<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>“类”的初步认识</title>
    <url>/yongxu.github.io/2024/10/22/c++%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="类的概念"><a href="#类的概念" class="headerlink" title="类的概念"></a><strong>类的概念</strong></h4><hr>
<p>类是面向对象编程的核心。我喜欢把类理解为一组数据和一个接口。例如机器人可以是一个类，他有一些数据，如颜色、大小、型号等，还有一个接口，如移动、转动、开关等。<br>类可以包含成员变量、成员函数、构造函数、析构函数等。成员变量是类的状态，成员函数是类的行为。</p>
<h4 id="类的声明和定义"><a href="#类的声明和定义" class="headerlink" title="类的声明和定义"></a><strong>类的声明和定义</strong></h4><hr>
<p>通常我们将类的定义放在头文件，而类行为的实现放在源文件中。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Robot</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// private:  声明成员变量</span>
    <span class="token comment">// 禁止直接访问，只能通过接口函数访问</span>
    <span class="token comment">// 在初始化时，通过构造函数初始化</span>
    <span class="token keyword">private</span><span class="token operator">:</span>
        string color<span class="token punctuation">;</span>
        <span class="token keyword">float</span> size<span class="token punctuation">;</span>
        <span class="token keyword">float</span> position<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">float</span> rotation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// public:  声明接口函数</span>
    <span class="token comment">// 允许直接访问，可以被其他函数调用</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token comment">/*
         构造函数
         构造函数的作用是初始化类的状态
         初始化方法：
            直接初始化，如：Robot r("red", 1.0);
            通过参数初始化，如：Robot r = Robot("red", 1.0);
        */</span>
        <span class="token function">Robot</span><span class="token punctuation">(</span>string c<span class="token punctuation">,</span> <span class="token keyword">float</span> s<span class="token punctuation">,</span> <span class="token keyword">float</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">float</span> r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
         析构函数
         析构函数的作用是释放类的资源（定义类的程序块结束后）
         一般不需要内容，除非使用new申请了内存需要手动释放
         */</span>
        <span class="token operator">~</span><span class="token function">Robot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

下面是类的实现：
<span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">Robot</span><span class="token punctuation">(</span>string c<span class="token punctuation">,</span> <span class="token keyword">float</span> s<span class="token punctuation">,</span> <span class="token keyword">float</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">float</span> r<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    color <span class="token operator">=</span> c<span class="token punctuation">;</span>
    size <span class="token operator">=</span> s<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Robot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 释放内存</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        position<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> z<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> x<span class="token punctuation">;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> y<span class="token punctuation">;</span>
        rotation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> z<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"color: "</span> <span class="token operator">&lt;&lt;</span> color <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size: "</span> <span class="token operator">&lt;&lt;</span> size <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"position: "</span> <span class="token operator">&lt;&lt;</span> position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"rotation: "</span> <span class="token operator">&lt;&lt;</span> rotation<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> rotation<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> rotation<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上是类的声明和定义，我们可以看到，类中包含了一些成员变量，以及一些接口函数。</p>
<pre class="line-numbers language-none"><code class="language-none">怎么理解接口？
接口是服务端为客户端封装好的，客户端只需要调用接口函数，就能完成某些功能。
服务端的责任是实现一些函数，并详细告知如何调用这些函数，以达到客户自己的目的。
而客户端的任务就是详细阅读接口文档，并调用接口函数，完成自己的需求。
所以，接口是服务端和客户端之间沟通的桥梁。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="如何使用类"><a href="#如何使用类" class="headerlink" title="如何使用类"></a><strong>如何使用类</strong></h4><hr>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> potions<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> rotation<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// 类的创建和结构类似</span>
Robot <span class="token function">robot</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 下面的创造方法实际上生成了一个临时对象，并将其赋值给了robot2</span>
Robot robot2 <span class="token operator">=</span> <span class="token function">Robot</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 我们也可以定义一个指针变量指向类对象，但最后需要手动释放内存，因为析构函数没有delete</span>
Robot <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Robot</span><span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 如果没有定义构造函数，可以不进行初始化赋值</span>
Robot empty<span class="token punctuation">;</span>
<span class="token comment">// 但如果已经定义了构造函数，这样的初始化是非法的。</span>
<span class="token comment">// 但我们可以通过函数重载来使其合法</span>
<span class="token comment">// 在类声明中，我们可以定义一个空参数的构造函数Robot();</span>

<span class="token comment">// 在c++11中，我们可以用列表初始化的方式来初始化类对象</span>
<span class="token comment">// 这需要列表内参数和某个构造函数参数一致</span>
Robot robot3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Robot robot4<span class="token punctuation">&#123;</span><span class="token string">"black"</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> potions<span class="token punctuation">,</span> rotation<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// 我们可以通过.来访问类的成员函数</span>
robot<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
robot<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
robot<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 但当我们使用const来修饰类对象时，我们不能调用类的成员函数</span>
<span class="token comment">// 因为成员函数可能修改类的状态，而const对象不能修改状态</span>
<span class="token comment">// 所以我们可以将某些成员函数声明为const，这样就可以在const对象上调用</span>
<span class="token keyword">const</span> Robot robot5 <span class="token operator">=</span> robot<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span> <span class="token comment">// 将shoow最后加上const，表示该函数不修改类的状态，即可被调用</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a><strong>this指针</strong></h4><hr>
<p>this指针是一个隐含的指针，指向当前对象的地址。在类的成员函数中，我们可以通过this指针来访问类的成员变量。<br>假如我们想让一个类的成员函数返回这个类本身，我们可以用this指针来实现。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 第一个Robot表明这是函数的返回值类型</span>
<span class="token comment">// 第二个Robot表明这是Robot类的一个成员函数</span>
<span class="token keyword">const</span> Robot<span class="token operator">&amp;</span> <span class="token class-name">Robot</span><span class="token double-colon punctuation">::</span><span class="token function">returnthisrobot</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><strong>作用域</strong></h4><hr>
<p>为什么定义类的成员函数是要加上类名称<code>Robot::</code>呢？<br>原因是我们声明成员函数时，是在类内进行的，所以作用域局限在类内。<br>因此在类外进行定义时，需要加上类名称。<br>这也就意味着我们可以在类外定义另一个同名函数，而不会与类的成员函数冲突。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">float</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>那为什么在类的成员函数中，我们可以直接使用类内的成员变量呢？<br>原因是成员函数都是内联函数，因此编译器会将函数体内的变量直接替换成内存地址，因此可以直接访问。</p>
<p>至于类的声明周期，前文提过，当创造类的程序块结束时，类的析构函数会自动调用，释放类占用的资源。</p>
<pre class="line-numbers language-none"><code class="language-none">如何在类内定义常量？
&#96;&#96;&#96;cpp
private:
    const int max_size &#x3D;  100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>这样的方法是不行的，因为类声明时并没有存储空间，因此无法存储常量。
正确的方法是：
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> max_size <span class="token operator">=</span>  <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
这样的声明方式会在整个程序中创建一个常量，因此可以被所有对象共享。
</code></pre>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>c++笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>my first blog</title>
    <url>/yongxu.github.io/2024/10/20/firstpost/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1>]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
</search>
